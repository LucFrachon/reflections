When would you want to use a remote repository rather than keeping all your work
local?

    Using a remote repository can be useful in many situations:
      - Working on a collaborative project
      - Having to work on a project from different locations (eg. home, office,
      client...)
      - Show a portfolio of projects we've worked on
      - etc.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    For the same reasons that we want to be able to control when we commit 
    changes: More control over the content of our local repo, especially if
    the remote has been changed by other users.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

     - Branches live within the same repo and represent different versions of
     the content that exist in parallel. They can be used to experiment new 
     features or work on exisiting ones without altering the content of main
     branch, which is supposed to work at all times. Any commits made in the 
     master branch after branching are not reachable from the other branch, 
     unless a git merge is performed.
     - Clones are exact copies of a repo's content (or specific branches 
     through the use of options in the command) and replicate exactly the 
     structure and history of the copied content, including branches, merges 
     and all commits.
     - Forks are similar to clones, but only exist on the GitHub server and 
     they always reference the original repo. To work on them locally, one has
     to first clone them to their computer.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    It allows us to see if other collaborators have made changes while we were
    working offline, and thus know that we need to be careful when merging our
    local branch.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Without Git / GitHub, coordination between team members is paramount to 
    ensure that no one undoes anyone else's work. This would require accurate
    tracking spreadsheets, frequent meetings and phone calls etc.
    However in some cases this kind of direct communication can actually be
    a good thing to make sure everyone understands exactly what they have to do.
    The short messages and comments that GitHub promotes might lead to misunder-
    standings.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Fill in your answer here
